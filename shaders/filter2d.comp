#version 430

#define WITH_OCCUPANCY
// #define WITH_SHARED

layout(local_size_x = 16, local_size_y = 16) in;

// layout(binding = 0) uniform sampler2D src;
layout(binding = 0, rgba8) uniform readonly image2D src;
layout(binding = 1, rgba8) uniform writeonly image2D dst;

#ifdef WITH_OCCUPANCY
layout(binding = 1) uniform sampler2D occupancy;
#endif

const int SRC_LEVEL = 0;

#ifdef WITH_SHARED
shared vec4 sharedValues[17][17];
#endif

void main() {
    ivec2 threadId = ivec2(gl_GlobalInvocationID.xy);
    vec2 srcSize = vec2(imageSize(src));
    // vec2 srcSize = textureSize(src, SRC_LEVEL).xy;
    ivec2 dstSize = imageSize(dst);

    if (any(greaterThan(threadId, dstSize)))
        return;

    vec2 tc = vec2(threadId) / vec2(dstSize);
    // vec2 texelSize = 1.0 / srcSize;
    // tc += 0.5 * texelSize;
    ivec2 srcCoord = 2 * threadId;

#ifdef WITH_SHARED
    ivec2 localId = ivec2(gl_LocalInvocationID.xy);
    sharedValues[localId.x][localId.y] = vec4(0.0);
    if (localId.x == 0)
        sharedValues[16][localId.y] = vec4(0.0);
    if (localId.y == 0)
        sharedValues[localId.x][16] = vec4(0.0);
    if (localId.x == 0 && localId.y == 0)
        sharedValues[16][16] = vec4(0.0);
    barrier();
#endif

#ifdef WITH_OCCUPANCY
    if (textureLod(occupancy, tc, SRC_LEVEL).r < 0.5) {
        // imageStore(dst, threadId, vec4(1,0,1,1));
        return;
    }
#endif

    const ivec2 offsets[] = ivec2[](
        ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1)
    );

    vec4 value = vec4(0);
#ifdef WITH_SHARED
    sharedValues[localId.x][localId.y] += textureLod(src, tc, SRC_LEVEL);
    barrier();
    for (int i = 0; i < 4; i++) {
        value += sharedValues[localId.x + offsets[i].x][localId.y + offsets[i].y];
    }
    value *= 0.25;
#else
    for (int i = 0; i < 4; i++) {
        // value += textureLodOffset(src, tc, SRC_LEVEL, offsets[i]);
        value += imageLoad(src, srcCoord + offsets[i]);
    }
    value *= 0.25;
#endif

    imageStore(dst, threadId, value);
}
