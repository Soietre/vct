#version 430

// #define WITH_OCCUPANCY

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0) uniform sampler3D src;
layout(binding = 1, rgba8) uniform writeonly image3D dst;

#ifdef WITH_OCCUPANCY
layout(binding = 1) uniform sampler3D occupancy;
#endif

const int SRC_LEVEL = 0;

void main() {
    ivec3 threadId = ivec3(gl_GlobalInvocationID.xyz);
    vec3 srcSize = textureSize(src, SRC_LEVEL).xyz;
    ivec3 dstSize = imageSize(dst);

    if (any(greaterThan(threadId, dstSize)))
        return;

    vec3 tc = vec3(threadId) / vec3(dstSize);
    vec3 texelSize = 1.0 / srcSize;
    tc += 0.5 * texelSize;

#ifdef WITH_OCCUPANCY
    if (textureLod(occupancy, tc, SRC_LEVEL).r < 0.5) {
        // imageStore(dst, threadId, vec4(1,0,1,1));
        return;
    }
#endif

    const ivec3 offsets[] = ivec3[](
        ivec3(0, 0, 0), ivec3(0, 0, 1), ivec3(0, 1, 0), ivec3(0, 1, 1),
        ivec3(1, 0, 0), ivec3(1, 0, 1), ivec3(1, 1, 0), ivec3(1, 1, 1)
    );

    vec4 value = vec4(0);
    for (int i = 0; i < 8; i++) {
        value += textureLodOffset(src, tc, SRC_LEVEL, offsets[i]);
    }
    value *= 0.125;

    imageStore(dst, threadId, value);
}
