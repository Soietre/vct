#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0, rgba8) uniform readonly image3D src;
layout(binding = 1, rgba8) uniform writeonly image3D dst;

const int KERNEL_BOX2 = 0;  // 2x2x2
const int KERNEL_BOX3 = 1;  // 3x3x3
const int KERNEL_CUBE = 2;  // filter along 6 axial directions

uniform int kernelMode = KERNEL_BOX2;

void main() {
    ivec3 threadId = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 dstSize = imageSize(dst);

    if (any(greaterThan(threadId, dstSize)))
        return;

    ivec3 srcCoord = 2 * threadId;

    vec4 value = vec4(0);
    switch (kernelMode) {
        case KERNEL_BOX2: {
            const ivec3 offsets[] = ivec3[](
                ivec3(0, 0, 0), ivec3(0, 0, 1), ivec3(0, 1, 0), ivec3(0, 1, 1),
                ivec3(1, 0, 0), ivec3(1, 0, 1), ivec3(1, 1, 0), ivec3(1, 1, 1)
            );

            for (int i = 0; i < 8; i++) {
                value += imageLoad(src, srcCoord + offsets[i]);
            }
            value *= 0.125;
        }
            break;
        case KERNEL_BOX3: {
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    for (int k = -1; k <= 1; k++) {
                        value += imageLoad(src, srcCoord + ivec3(i, j, k));
                    }
                }
            }
            value *= 0.037;
        }
            break;
        case KERNEL_CUBE:{
            const ivec3 offsets[] = ivec3[](
                ivec3(0, 0, 0), ivec3(0, 0, 1), ivec3(0, 1, 0), ivec3(1, 0, 0),
                ivec3(0, 0, -1), ivec3(0, -1, 0), ivec3(-1, 0, 0)
            );

            for (int i = 0; i < 7; i++) {
                value += imageLoad(src, srcCoord + offsets[i]);
            }
            value *= 0.143;
        }
            break;
        default:
            break;
    }

    imageStore(dst, threadId, value);
}
