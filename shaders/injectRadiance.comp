#version 430

#extension GL_NV_gpu_shader5: enable

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba16f, binding = 0) uniform image3D voxelColor;
layout(rgba16f, binding = 1) uniform image3D voxelNormal;

uniform sampler2D shadowmap;

uniform mat4 lsInverse;

uniform vec3 lightPos;
uniform vec3 lightInt;

ivec3 voxelIndex(vec3 pos) {
    const float minx = -20, maxx = 20,
        miny = -20, maxy = 20,
        minz = -20, maxz = 20;
    const int voxelDim = 64;

    float rangex = maxx - minx;
    float rangey = maxy - miny;
    float rangez = maxz - minz;

    float x = voxelDim * ((pos.x - minx) / rangex);
    float y = voxelDim * ((pos.y - miny) / rangey);
    float z = voxelDim * (1 - (pos.z - minz) / rangez);

    return ivec3(x, y, z);
}

void main() {
    ivec2 threadId = ivec2(gl_GlobalInvocationID.xy);
    ivec2 shadowmapSize = textureSize(shadowmap, 0);

    if (threadId.x > shadowmapSize.x || threadId.y > shadowmapSize.y)
        return;

    // Unproject from shadowmap and get associated voxel position
    vec2 shadowmapTexcoord = vec2(threadId) / vec2(shadowmapSize);
    float shadowmapDepth = texture(shadowmap, shadowmapTexcoord).r;
    vec3 ndc = vec3(shadowmapTexcoord, shadowmapDepth) * 2 - vec3(1);
    vec3 worldPosition = (lsInverse * vec4(ndc, 1)).xyz;
    ivec3 voxelPosition = voxelIndex(worldPosition);

    // Calculate diffuse lighting
    vec4 color = imageLoad(voxelColor, voxelPosition);
    color.rgba /= color.a;
    vec3 normal = normalize(imageLoad(voxelNormal, voxelPosition).xyz);

    vec3 lightVector = normalize(lightPos - worldPosition);
    float diffuse = max(dot(normal, lightVector), 0);

    // Inject into voxel texture
    imageStore(voxelColor, voxelPosition, f16vec4(color));
}