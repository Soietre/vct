#version 430

layout(local_size_x = 16, local_size_y = 16) in;

#define USE_RGBA16F 0

#if USE_RGBA16F
#define voxelLayout rgba16f
#else
#define voxelLayout rgba8
#endif

layout(binding = 0, voxelLayout) uniform readonly image3D voxelColor;
layout(binding = 1, voxelLayout) uniform readonly image3D voxelNormal;
layout(binding = 2, r32ui) uniform uimage3D voxelRadiance;

uniform sampler2D shadowmap;
layout(binding = 10) uniform sampler3D warpmap;

uniform mat4 lsInverse;

uniform vec3 lightPos;
uniform vec3 lightInt;

uniform int voxelDim;
uniform vec3 voxelMin, voxelMax;
uniform vec3 voxelCenter;
uniform bool warpVoxels;
uniform bool warpTexture;

uniform bool radianceLighting = false;
uniform bool radianceDilate = false;
uniform bool temporalFilterRadiance = false;
uniform float temporalDecay = 0;

uniform vec3 eye;
#pragma include "common.glsl"

void main() {
    ivec2 threadId = ivec2(gl_GlobalInvocationID.xy);
    ivec2 shadowmapSize = textureSize(shadowmap, 0);

    if (threadId.x > shadowmapSize.x || threadId.y > shadowmapSize.y)
        return;

    // Unproject from shadowmap and get associated voxel position
    vec2 shadowmapTexcoord = vec2(threadId) / vec2(shadowmapSize);
    float shadowmapDepth = texture(shadowmap, shadowmapTexcoord).r;
    vec3 ndc = vec3(shadowmapTexcoord, shadowmapDepth) * 2 - vec3(1);
    vec3 worldPosition = (lsInverse * vec4(ndc, 1)).xyz;
    ivec3 voxelPosition = ivec3(voxelIndex(worldPosition, voxelDim, voxelCenter, voxelMin, voxelMax, warpVoxels));

    if (any(greaterThanEqual(voxelPosition, ivec3(voxelDim))) || any(lessThan(voxelPosition, ivec3(0)))) {
        return;
    }

    if (radianceDilate) {
        const ivec3 offsets[] = ivec3[](
            ivec3(0, 0, 0),
            ivec3(0, 0, 1), ivec3(-1, 0, 0),
            ivec3(0, 1, 0), ivec3(0, -1, 0),
            ivec3(1, 0, 0), ivec3(-1, 0, 0)
        );

        for (int i = 0; i < 7; i++) {
            ivec3 voxelIndex = voxelPosition + offsets[i];

            vec4 color = imageLoad(voxelColor, voxelIndex);
            imageStore(voxelRadiance, voxelIndex, uvec4(packUnorm4x8(color), 0, 0, 0));
        }
    }
    else {
        vec4 color = imageLoad(voxelColor, voxelPosition);

        if (radianceLighting) {
            // Calculate diffuse lighting
            vec3 normal = imageLoad(voxelNormal, voxelPosition).xyz;
            normal = 2 * normal - 1;    // need to remap normal from [0, 1] -> [-1, 1]
            vec3 lightPosVoxelSpace = voxelIndex(lightPos, voxelDim, voxelCenter, voxelMin, voxelMax, warpVoxels);
            vec3 lightVector = normalize(lightPosVoxelSpace - voxelPosition);
            float diffuse = max(dot(normal, lightVector), 0);

            color.rgb = diffuse * lightInt * color.rgb;

            // Already temporally filtered if lighting was done during voxelize
            // TODO this doesn't work right now
            if (temporalFilterRadiance) {
                vec4 previousColor = unpackUnorm4x8(imageLoad(voxelRadiance, voxelPosition).r);
                // Opacity is filtered from transferVoxels.comp so we only need to mix the color
                color.rgb = (1 - temporalDecay) * color.rgb + temporalDecay * previousColor.rgb;
                // color.rgb = (1 - temporalDecay) * color.rgb + previousColor.rgb;
                color.a = previousColor.a;
            }

            // imageAtomicMax(voxelRadiance, voxelPosition, packUnorm4x8(color));
            imageStore(voxelRadiance, voxelPosition, uvec4(packUnorm4x8(color), 0, 0, 0));
        }
        else {
            imageStore(voxelRadiance, voxelPosition, uvec4(packUnorm4x8(color), 0, 0, 0));
        }
    }
}
